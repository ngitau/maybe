<% require "dotenv"; Dotenv.load('.env.production') %>

# Name of your application. Used to uniquely configure containers.
service: maybe

# Name of the container image.
image: ngitau/maybe

# Deploy to these servers.
servers:
  web:
    - <%= ENV['APP_HOST'] %>
  job:
    hosts:
      - <%= ENV['APP_HOST'] %>
    cmd: bundle exec sidekiq

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: <%= ENV['APP_DOMAIN'] %>
  # Proxy connects to your container on port 80 by default.
  app_port: 3000

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  server: <%= ENV['ECR_REGISTRY_SERVER'] %>
  username: AWS

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: arm64
  # Pass in additional build args needed for your Dockerfile.
  # args:
  #   RUBY_VERSION: <%= File.read('.ruby-version').strip %>

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
env:
  secret:
    - APP_DOMAIN
    - DB_HOST
    - DB_PORT
    - EMAIL_SENDER
    - POSTGRES_DB
    - POSTGRES_USER
    - POSTGRES_PASSWORD
    - RAILS_MASTER_KEY
    - REDIS_URL
    - SELF_HOSTED
    - SENTRY_DSN
    - SENTRY_RELEASE
    - SMTP_ADDRESS
    - SMTP_PASSWORD
    - SMTP_PORT
    - SMTP_TLS_ENABLED
    - SMTP_USERNAME
    - SYNTH_API_KEY

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
#
# aliases:
#   shell: app exec --interactive --reuse "bash"

# Use a different ssh user than root
#
# ssh:
#   user: app

# Use a persistent storage volume.
#
# volumes:
#   - "app_storage:/app/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /app/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
accessories:
  db:
    image: postgres:16
    host: <%= ENV['APP_HOST'] %>
    port: "127.0.0.1:5432:5432"
    env:
      secret:
        - POSTGRES_DB
        - POSTGRES_USER
        - POSTGRES_PASSWORD
    directories:
      - data:/var/lib/postgresql/data
    files:
      - db/production_setup.sql:/docker-entrypoint-initdb.d/setup.sql
  redis:
    image: valkey/valkey:8
    host: <%= ENV['APP_HOST'] %>
    port: "127.0.0.1:6379:6379"
    directories:
      - data:/data
